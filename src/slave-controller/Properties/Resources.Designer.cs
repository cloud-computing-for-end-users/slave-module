//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace slave_controller.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("slave_controller.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import os
        ///
        ///import pyautogui
        ///import socket
        ///
        ///port = 60600
        ///
        ///
        ///
        ///
        ///def HandleCommandCall(command):
        ///
        ///    parts = command.split(&quot;;&quot;)
        ///    key = parts[0].split(&quot;:&quot;)[1]
        ///    isDown = &quot;true&quot; == (parts[1].split(&quot;:&quot;)[1])
        ///
        ///    if(isDown):
        ///        pyautogui.keyDown(key)
        ///        return 0
        ///    else:
        ///        pyautogui.keyUp(key)
        ///        return 0
        ///
        ///    return 1
        ///
        ///serverSocket = socket.socket()
        ///print (&quot;Socket successfully created&quot;)
        ///
        ///serverSocket.bind((&apos;&apos;,port))
        ///print (&quot;socket binded to: &quot; ,port)
        ///serverS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PyAutoGuiKeyboardController {
            get {
                return ResourceManager.GetString("PyAutoGuiKeyboardController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import os
        ///
        ///import pyautogui
        ///import socket
        ///
        ///port = 60606
        ///
        ///
        ///
        ///
        ///def HandleCommandCall(command):
        ///
        ///    args = command.split()
        ///    #print(&quot;full arg:&quot;, args)
        ///    knownCommands = {
        ///        &quot;-mo&quot;:1, # move mouse
        ///        &quot;-cl&quot;:2, # click left mouse button
        ///        &quot;-ld&quot;:3, # left mouse button down
        ///        &quot;-lu&quot;:4, # left mouse button up
        ///        &quot;-cr&quot;:5, # click right mouse button
        ///        &quot;-cd&quot;:6, # click double?
        ///        &quot;-sd&quot;:7, # scroll down
        ///        &quot;-su&quot;:8, # scroll up
        ///        &quot;-lo&quot;:9,  # locat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PyAutoGuiMouseController {
            get {
                return ResourceManager.GetString("PyAutoGuiMouseController", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///import sys
        ///import os
        ///import pyautogui
        ///import socket
        ///import threading
        ///import queue
        ///import socket
        ///import time
        ///
        ///# this program will make screnshots, and put them in a sending queue. if there are no images in the sending queue the
        ///# sending thread will wait and continiouslt check the queue. if there are more than two images in the queue these will
        ///# be dequeued and not send
        ///print(sys.executable)
        ///
        ///print(sys.argv)
        ///
        ///offsetFromLeft = int(sys.argv[1])
        ///offsetFromTop = int(sys.argv[2])
        ///imageWidth = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScreenCapturing {
            get {
                return ResourceManager.GetString("ScreenCapturing", resourceCulture);
            }
        }
    }
}
